openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/JOELDAMOLE0/PigeonPost/1.0.0
  - description: Development Server
    url: https://pigeon--post.web.app/
info:
  version: "1.0.0"
  title: Pigeon Post Project API
  description: >-
    This is the API spec for the Pigeon Post COMPX527 Project.
security:
  - session_cookie: []
paths:
  /:
    get:
      summary: Serves the UI of the application
      responses:
        '200':
          description: OK
        '404':
          $ref: '#/components/responses/NotFoundResponse'
          
  /login:
    post:
      summary: Logs in a user with a username and password
      responses:
        '201':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GETMessageListSchema'
        '401':
          description: NOT AUTHENTICATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSchema'
  /api/message:
    get:
      summary: Gets a list of all message for the current user
      tags:
        - Logged In
      security:
        - session_cookie: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GETMessageListSchema'
        '401':
          description: NOT AUTHENTICATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSchema'
    post:
      summary: Sends a message
      tags:
        - Logged In
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/POSTMessageSchema'
      responses:
        '201':
          description: SUCCESS
        '401':
          description: NOT AUTHENTICATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSchema'
  /api/message/{id}:
    get:
      summary: Get Mail Entry by ID
      tags:
        - Logged In
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the message to retrieve
      security:
        - session_cookie: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GETMessageSchema'
        '401':
          description: NOT AUTHENTICATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSchema'
  /api/message/{id}/location:
    get:
      summary: Get Mail Entry by ID
      tags:
        - Logged In
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the message to retrieve
      security:
        - session_cookie: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GETMessageLocationSchema'
        '202':
          description: STILL PROCESSING
        '401':
          description: NOT AUTHENTICATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSchema'
  /api/user:
    get:
      summary: Get the current user
      tags:
        - Logged In
      security:
        - session_cookie: []
      responses:
        '200':
          description: User Exists
        '400':
          description: User Exists
        '401':
          description: NOT AUTHENTICATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSchema'
    post:
      summary: Create a new user with their location
      tags:
        - Logged In
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/POSTUserSchema'
      responses:
        '201':
          description: SUCCESS
        '401':
          description: NOT AUTHENTICATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSchema'
components:
  schemas:
    POSTMessageSchema:
      type: object
      properties:
        receiverName:
          type: string
          example: Jane Smith
        sentPigeon:
          type: string
          example: PigeonNameOrID
        message:
          type: string
          example: "This is my message to Jane Smith"
    POSTUserSchema:
      type: object
      properties:
        userName:
          type: string
          example: jane.smith@gmail.com
        location:
          $ref: '#/components/schemas/LocationSchema'
    DBMessageSchema:
      type: object
      properties:
        senderName:
          type: string
          example: John Doe
        receiverName:
          type: string
          example: Jane Smith
        sentDate:
          type: string
          format: date-time
          example: "2023-08-29T21:10:08"
        arrivalDate:
          type: string
          format: date-time
          example: "2023-09-15T21:10:08"
        sentPigeon:
          type: string
          example: PigeonNameOrID
        message:
          type: string
          example: "This is my message to Jane Smith"
    GETMessageSchema:
      type: object
      properties:
        id:
          type: string
          example: 0123456789abcdef
        name:
          type: string
          example: John Doe
        message:
          type: string
          example: Hello, how are you?
        sentDate:
          type: string
          format: date-time
          example: "2023-08-29T21:10:08"
        arrivalDate:
          type: string
          format: date-time
          example: "2023-09-15T21:10:08"
        locationListID:
          type: number
          example: 123456
    GETMessageListSchema:
      type: array
      items:
        $ref: '#/components/schemas/GETMessageSchema'
    GETMessageLocationSchema:
      type: array
      items:
        $ref: '#/components/schemas/LocationSchema'
    LocationSchema:
      type: object
      properties:
        longitude:
          type: number
          example: -122.4194
        latitude:
          type: number
          example: 37.7749
    ErrorSchema:
      type: object
      properties:
        cause:
          type: string
          example: authentication
        message:
          type: string
          example: User not authenticated
  responses:
    NotFoundResponse:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorSchema'  # Reference the common error schema
          example:
            cause: "availability"
            message: "The resource was not found"
  securitySchemes:
    session_cookie:
      type: apiKey
      in: cookie
      name: session_cookie
    password:
      type: oauth2
      flows:
        password:
          tokenUrl: 'http://example.com/oauth/token'
          scopes:
            write: allows modifying resources
            read: allows reading resources